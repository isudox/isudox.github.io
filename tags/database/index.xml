<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on I sudo X</title>
    <link>https://isudox.com/tags/database/</link>
    <description>Recent content in Database on I sudo X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2020 13:41:33 +0800</lastBuildDate>
    
	<atom:link href="https://isudox.com/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySQL Binlog 解析组件 open-replicator 原理介绍</title>
      <link>https://isudox.com/2020/02/28/dive-into-open-replicator/</link>
      <pubDate>Fri, 28 Feb 2020 13:41:33 +0800</pubDate>
      
      <guid>https://isudox.com/2020/02/28/dive-into-open-replicator/</guid>
      <description>open-replicator 是一款高性能的 MySQL binlog 解析组件，通过 open-replicator 可以对 binlog 进行实时的解析、过滤、广播。业界常用的数据同步中间件 databus 就是基于 open-replicator 抓取 MySQL 的 binlog。
在探索 open-replicator 原理前，可以先思考一个问题，如果是自己来开发这个组件该怎么做。 open-replicator 的做法是参照 MySQL 主从复制的方式，像 slave 一样连接到 MySQL 实例，拉取 binlog 并解析，再通过回调进行处理。
MySQL 主从复制的过程：
 master 将数据变更写入 binlog； slave 将 master 的 binlog event 复制到 relay log； slave 重放 relay log 中的事件，把数据变更写入到 DB；  类似的，open-replicator 的执行过程是：
 包装成 slave 连接到目标 MySQL，并发送 dump 请求； master 收到 dump 请求，返回 binlog 到 open-replicator； open-replicator 解析 binlog；  源码梳理 参考上面的类图，open-replicator 的入口就是 OpenReplicator 类，其主要的成员属性有：</description>
    </item>
    
  </channel>
</rss>