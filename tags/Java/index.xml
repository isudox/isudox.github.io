<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on I sudo X</title>
    <link>https://isudox.com/tags/Java/</link>
    <description>Recent content in Java on I sudo X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 12 Jul 2017 11:10:03 +0000</lastBuildDate><atom:link href="https://isudox.com/tags/Java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 8 Stream API 和函数式编程</title>
      <link>https://isudox.com/2017/07/12/java-8-streams-api-fp-intro/</link>
      <pubDate>Wed, 12 Jul 2017 11:10:03 +0000</pubDate>
      
      <guid>https://isudox.com/2017/07/12/java-8-streams-api-fp-intro/</guid>
      <description>流式操作我们在很多地方都使用过，比如 Shell 操作时经常用到的 ps aux | grep xxx、Python 中的 mapreduce 方法。Java 8 也引入了 Stream API，并且加入 Lambda 表达式，</description>
    </item>
    
    <item>
      <title>Spring AOP 那些事儿</title>
      <link>https://isudox.com/2017/05/24/spring-aop-guide/</link>
      <pubDate>Wed, 24 May 2017 19:25:56 +0000</pubDate>
      
      <guid>https://isudox.com/2017/05/24/spring-aop-guide/</guid>
      <description>AOP 即 Aspect-Oriented Programming，面向切面编程，是对 OOP 编程思想的补充。OOP 核心是继承、封装、多态，是实现 OOP 模块化的基础。当 OOP 达到一定规模后，对</description>
    </item>
    
    <item>
      <title>探索 Spring MVC 重定向和转发</title>
      <link>https://isudox.com/2017/02/16/spring-mvc-redirect-forward/</link>
      <pubDate>Thu, 16 Feb 2017 11:35:09 +0000</pubDate>
      
      <guid>https://isudox.com/2017/02/16/spring-mvc-redirect-forward/</guid>
      <description>最近参与的一个微信公众号相关项目的开发中，业务包含大量的页面跳转逻辑，以及拦截器的数据获取校验。其间也遇到一些困惑，在探究 Spring MVC 中 redirect 和 forward 的源码</description>
    </item>
    
    <item>
      <title>Spring Boot 学习笔记 1：起手式 Hello World</title>
      <link>https://isudox.com/2017/02/10/spring-boot-note-1/</link>
      <pubDate>Fri, 10 Feb 2017 23:59:24 +0000</pubDate>
      
      <guid>https://isudox.com/2017/02/10/spring-boot-note-1/</guid>
      <description>Spring Boot 是 Pivotal 团队开发的开源 Java Web 框架，相比同门师兄 Spring，Spring Boot 把开发者从繁重的配置中解放出来，遵循“约定大于配置”(convent</description>
    </item>
    
    <item>
      <title>通过反射统一 RPC 调用入口</title>
      <link>https://isudox.com/2017/02/06/rpc-uni-entry-with-reflection/</link>
      <pubDate>Mon, 06 Feb 2017 15:18:55 +0000</pubDate>
      
      <guid>https://isudox.com/2017/02/06/rpc-uni-entry-with-reflection/</guid>
      <description>最近项目开发中，有这样一个场景，依赖外部很多服务，每个服务从功能上彼此独立，因此各个外部服务的调用也是相对独立的。因此当时为每个调用都写了一</description>
    </item>
    
    <item>
      <title>敏捷开发实战：AOP &#43; 反射</title>
      <link>https://isudox.com/2016/10/11/spring-aop-with-reflection/</link>
      <pubDate>Tue, 11 Oct 2016 11:40:04 +0000</pubDate>
      
      <guid>https://isudox.com/2016/10/11/spring-aop-with-reflection/</guid>
      <description>双十一前遭到产品突袭，要把非自营商家的处方药购买流程改为预约流程（出于某种考虑），内心一万只草泥马呼啸而过，那么多接口只给几天时间怎么改的过</description>
    </item>
    
    <item>
      <title>JUnit &#43; Mockito 单元测试的风云际会</title>
      <link>https://isudox.com/2016/10/10/unit-test-with-junit-mockito/</link>
      <pubDate>Mon, 10 Oct 2016 22:12:35 +0000</pubDate>
      
      <guid>https://isudox.com/2016/10/10/unit-test-with-junit-mockito/</guid>
      <description>JUnit 是 2015 年 Java 开发者引用最多的库，是 Java 单元测试框架里无可争议的 No.1。JUnit 基本上能覆盖大部分接口的测试，但如果待测接口依赖外部服务，比如</description>
    </item>
    
    <item>
      <title>Java 常用容器小结</title>
      <link>https://isudox.com/2016/09/13/java-collections-overview/</link>
      <pubDate>Tue, 13 Sep 2016 20:15:58 +0000</pubDate>
      
      <guid>https://isudox.com/2016/09/13/java-collections-overview/</guid>
      <description>无论是什么编程语言，容器都是非常重要的概念，在 Java 的实际开发中更是无处不在，各种 List、Set、Map。很多时候就是随着编程的惯性用了 ArrayList 或者</description>
    </item>
    
    <item>
      <title>JDK 8 中 HashMap 的工作原理</title>
      <link>https://isudox.com/2016/08/08/how-hashmap-works-in-jdk8/</link>
      <pubDate>Mon, 08 Aug 2016 17:31:32 +0000</pubDate>
      
      <guid>https://isudox.com/2016/08/08/how-hashmap-works-in-jdk8/</guid>
      <description>Java 容器类中，HashMap 是一个绕不开的重点，无论是实际开发还是求职面试。由于对 JDK 6 下 HashMap 的讨论已经很多了，而且 JDK 8 对 HashMap 做了比较大的改进，本文</description>
    </item>
    
    <item>
      <title>Java String 的内存模型</title>
      <link>https://isudox.com/2016/06/22/memory-model-of-string-in-java-language/</link>
      <pubDate>Wed, 22 Jun 2016 13:00:53 +0000</pubDate>
      
      <guid>https://isudox.com/2016/06/22/memory-model-of-string-in-java-language/</guid>
      <description>在之前写的一篇博客中(String, StringBuilder, StringBuffer 区别)，提到了 String 对象在内存中的存储问题，当时只是一笔带过，在本篇里，对这个问题做一点深入的探讨。 字符</description>
    </item>
    
    <item>
      <title>Spring 加载含中文 properties 文件的思考</title>
      <link>https://isudox.com/2016/05/23/some-thoughts-on-loading-utf8-properties-file-in-spring/</link>
      <pubDate>Mon, 23 May 2016 15:17:18 +0000</pubDate>
      
      <guid>https://isudox.com/2016/05/23/some-thoughts-on-loading-utf8-properties-file-in-spring/</guid>
      <description>在公司项目的中间件代码里看到有些配置文件里有很多 &amp;quot;\uXXXX&amp;quot; 标记的 unicode 字符，其实就是配置里的中文字符。我一时不得其解，开发平台是 Linux，项目文件都是</description>
    </item>
    
    <item>
      <title>Spring MVC 拦截器使用小结</title>
      <link>https://isudox.com/2016/05/10/summary-of-spring-mvc-interceptor/</link>
      <pubDate>Tue, 10 May 2016 16:38:39 +0000</pubDate>
      
      <guid>https://isudox.com/2016/05/10/summary-of-spring-mvc-interceptor/</guid>
      <description>之前用 Django 开发的时候，Django 内置的 middleware 提供了 login_required() 装饰器作登录拦截。强大的 Spring MVC 也支持拦截器，可以通过不算复杂的配置非常灵活的控制请求拦截策略。</description>
    </item>
    
    <item>
      <title>String, StringBuilder, StringBuffer 区别</title>
      <link>https://isudox.com/2016/02/17/difference-between-string-stringbuilder-stringbuffer/</link>
      <pubDate>Wed, 17 Feb 2016 15:22:01 +0000</pubDate>
      
      <guid>https://isudox.com/2016/02/17/difference-between-string-stringbuilder-stringbuffer/</guid>
      <description>今天下午浏览代码时看到 IDEA 给出了一段提示： StringBuffer variables may be declared as StringBuilder. 回想了下，除了印象中 StringBuffer 是线程安全，而 StringBuilder 非线程安全之外，已经想不到二者其他的区别和使用场</description>
    </item>
    
  </channel>
</rss>
