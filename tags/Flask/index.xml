<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flask on I sudo X</title>
    <link>https://isudox.com/tags/flask/</link>
    <description>Recent content in Flask on I sudo X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Feb 2017 19:47:11 +0000</lastBuildDate>
    
	<atom:link href="https://isudox.com/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>读 Flask 源码：源码结构</title>
      <link>https://isudox.com/posts/2017-02-14-explore-flask-source-code-structure/</link>
      <pubDate>Tue, 14 Feb 2017 19:47:11 +0000</pubDate>
      
      <guid>https://isudox.com/posts/2017-02-14-explore-flask-source-code-structure/</guid>
      <description>打算对 Flask 的学习做个整理，以 Flask 的 GitHub 代码库的 master 分支为参考。其实早期的 0.3 版还是单文件，整个 flask.py 加上注释也只有 1426 行代码，非常简洁，很适合作为 Python 源码学习的教材。
拿到源码先不着急，就像读书一样，不妨浏览下目录，以便有个全局的了解。Flask 的源码有一个非常好的优点，就是它的注释非常完备，即使不看源码，只看注释，也能有个大概的理解。
从 Flask 根目录下的 setup.py 可以看到，Flask 依赖的组件主要有 3 个：
 Werkzeug：一个 HTTP 和 WSGI 的工具集； Jinja2：Python 的前端模板引擎； itsdangerous：处理并传递可信数据的辅助函数集；  Flask 的核心代码都在 flask 目录下，其目录结构如下：
flask ├── ext │ └── __init__.py flask 扩展 ├── __init__.py 导入模块 ├── __main__.py 命令行运行 ├── _compat.py Py2/3 兼容性模块 ├── app.py 核心模块 ├── blueprints.py 蓝图模块 ├── cli.py 命令行支持模块 ├── config.py flask 配置模块 ├── ctx.</description>
    </item>
    
    <item>
      <title>读 Flask 源码：Context</title>
      <link>https://isudox.com/posts/2016-10-02-flask-context-guide/</link>
      <pubDate>Sun, 02 Oct 2016 20:11:40 +0000</pubDate>
      
      <guid>https://isudox.com/posts/2016-10-02-flask-context-guide/</guid>
      <description>Flask Context 类似 Spring 框架的核心组件 Context，给应用程序提供运行时所需的环境（包含状态、变量等）的快照。如果程序本身就包含了运行所需的完备条件，那么它可以独立运行了；如果程序需要外部环境的支持，Context 的存在就有意义。比如 Flask Web 开发中常用的 current_app、request 都是 Context，可以在不同方法中调用，并且实现通信及交互。
Context 的实现 Flask 提供了 4 个 Context：
   Context 类型 说明     flask.current_app Application Context 当前 app 的实例对象   flask.g Application Context 处理请求时用作临时存储的对象   flask.request Request Context 封装了 HTTP 请求中的内容   flask.session Request Context 存储了用户回话    这些 Context 分为 Application Context 和 Request Context 两类：
 Application Context: 是提供给由 app = Flask(__name__) 所创建的 Flask app 的 Context； Request Context: 是客户端发起 HTTP 请求时，Flask 对象为 HTTP 请求对象所创建的 Context；  这些 Context 定义在 Flask 源码（v0.</description>
    </item>
    
    <item>
      <title>Gunicorn 驱动工厂模式 Flask 应用</title>
      <link>https://isudox.com/posts/2016-08-29-running-flask-with-gunicorn-in-application-factory/</link>
      <pubDate>Mon, 29 Aug 2016 13:45:50 +0000</pubDate>
      
      <guid>https://isudox.com/posts/2016-08-29-running-flask-with-gunicorn-in-application-factory/</guid>
      <description>之前用 uWsgi 部署过 Django 应用，但当时的开发和部署都还手生，有很多不合理的地方，最近写的一个 Flask 应用，用了另一个 wsgi 容器 —— Gunicorn，并且利用工厂模式对不同开发环境进行了隔离。工厂模式下的 Flask 应用在用 Gunicorn 部署时，需要做一点针对性的改动。
基础的 Flask 应用部署 先写一个最简单的 Flask 应用 hello：
# hello.py from flask import Flask app = Flask(__name__) @app.route(&amp;#39;/&amp;#39;) def hello_world(): return &amp;#34;Hello World!&amp;#34; if __name__ == &amp;#39;__main__&amp;#39;: app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=5000) 然后用 Python 去解释执行这段脚本即可，Flask 内置了简易的 HTTP Server 来处理请求。
当然这仅仅供本地测试的运行方式，线上部署的方案，通常是采用 wsgi 程序来驱动 Flask / Django 应用。Gunicorn 是性能比较好的一个方案（有时间我会做一次 Gunicorn 与 uWsgi 的性能压测对比）。Gunicorn 的驱动 hello 应用的命令如下：
gunicorn -w 4 -b 127.0.0.1:5000 hello:app Gunicorn 的常用运行参数说明：</description>
    </item>
    
  </channel>
</rss>