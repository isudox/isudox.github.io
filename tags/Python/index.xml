<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on I sudo X</title>
    <link>https://isudox.com/tags/python/</link>
    <description>Recent content in Python on I sudo X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 22 Apr 2018 23:20:03 +0000</lastBuildDate><atom:link href="https://isudox.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript ES6 和 Python 中的 Generator</title>
      <link>https://isudox.com/2018/04/22/generators-in-python-es6/</link>
      <pubDate>Sun, 22 Apr 2018 23:20:03 +0000</pubDate>
      
      <guid>https://isudox.com/2018/04/22/generators-in-python-es6/</guid>
      <description>这几天折腾的一个 RSS 聚合爬虫，前端部分涉及到 redux-saga，对 ES6 里引入的 Generator 运用很花哨，看起来会云里雾里，其实和 Python 的 generator、y</description>
    </item>
    
    <item>
      <title>读 Flask 源码：源码结构</title>
      <link>https://isudox.com/2017/02/14/explore-flask-source-code-structure/</link>
      <pubDate>Tue, 14 Feb 2017 19:47:11 +0000</pubDate>
      
      <guid>https://isudox.com/2017/02/14/explore-flask-source-code-structure/</guid>
      <description>打算对 Flask 的学习做个整理，以 Flask 的 GitHub 代码库的 master 分支为参考。其实早期的 0.3 版还是单文件，整个 flask.py 加上注释也只有 1426 行代码，非常简洁，很适合作为 Python 源码学习</description>
    </item>
    
    <item>
      <title>理解 Python 生成器</title>
      <link>https://isudox.com/2016/10/26/python-generator-guide/</link>
      <pubDate>Wed, 26 Oct 2016 20:23:03 +0000</pubDate>
      
      <guid>https://isudox.com/2016/10/26/python-generator-guide/</guid>
      <description>在 Python 里创建一个有一定规律的序列，很直观的做法就是在循环里创建序列的各个元素。但 Python 有更加符合 Pythonic 风格的做法，就是用生成器来实现。 举个被写滥的例子</description>
    </item>
    
    <item>
      <title>读 Flask 源码：Context</title>
      <link>https://isudox.com/2016/10/02/flask-context-guide/</link>
      <pubDate>Sun, 02 Oct 2016 20:11:40 +0000</pubDate>
      
      <guid>https://isudox.com/2016/10/02/flask-context-guide/</guid>
      <description>Flask Context 类似 Spring 框架的核心组件 Context，给应用程序提供运行时所需的环境（包含状态、变量等）的快照。如果程序本身就包含了运行所需的完备条件，那</description>
    </item>
    
    <item>
      <title>理解 Python 装饰器</title>
      <link>https://isudox.com/2016/09/09/python-decorator-guide/</link>
      <pubDate>Fri, 09 Sep 2016 22:42:36 +0000</pubDate>
      
      <guid>https://isudox.com/2016/09/09/python-decorator-guide/</guid>
      <description>前一篇水文里记录的 Click 包，大量的运用了 Python 的装饰器。装饰器是非常实用的编程思想，Java 开发里经常看到的 AOP 也是同样的思想。Python 装饰器使用</description>
    </item>
    
    <item>
      <title>Python Click 学习笔记</title>
      <link>https://isudox.com/2016/09/03/learning-python-package-click/</link>
      <pubDate>Sat, 03 Sep 2016 01:22:37 +0000</pubDate>
      
      <guid>https://isudox.com/2016/09/03/learning-python-package-click/</guid>
      <description>Click 是 Flask 的团队 pallets 开发的优秀开源项目，它为命令行工具的开发封装了大量方法，使开发者只需要专注于功能实现。恰好我最近在开发的一个小工具需要在命令行</description>
    </item>
    
    <item>
      <title>Gunicorn 驱动工厂模式 Flask 应用</title>
      <link>https://isudox.com/2016/08/29/running-flask-with-gunicorn-in-application-factory/</link>
      <pubDate>Mon, 29 Aug 2016 13:45:50 +0000</pubDate>
      
      <guid>https://isudox.com/2016/08/29/running-flask-with-gunicorn-in-application-factory/</guid>
      <description>之前用 uWsgi 部署过 Django 应用，但当时的开发和部署都还手生，有很多不合理的地方，最近写的一个 Flask 应用，用了另一个 wsgi 容器 —— Gunicorn，并且利用工厂</description>
    </item>
    
    <item>
      <title>Django 部署的非最佳实践</title>
      <link>https://isudox.com/2016/06/01/non-best-practice-of-django-deployment/</link>
      <pubDate>Wed, 01 Jun 2016 17:24:27 +0000</pubDate>
      
      <guid>https://isudox.com/2016/06/01/non-best-practice-of-django-deployment/</guid>
      <description>上周末接到急差，要重新部署之前开发的 Django 项目。磕磕绊绊遇到很多预想不到的问题，也发现自己对 Django 应用的部署依旧很生疏，遂记一篇水文。 一些题外话 Django 工</description>
    </item>
    
    <item>
      <title>[译] 使用 Django 认证系统</title>
      <link>https://isudox.com/2016/03/22/using-the-django-authentication-system-zh/</link>
      <pubDate>Tue, 22 Mar 2016 22:31:20 +0000</pubDate>
      
      <guid>https://isudox.com/2016/03/22/using-the-django-authentication-system-zh/</guid>
      <description>译自 Django Documentation，版本 1.9。原文遵循 BSD 协议，已向 Django Project 确认翻译自由。 本文介绍了 Django 认证系统在默认配置下的使用。默认配置已经发展</description>
    </item>
    
    <item>
      <title>阿里大鱼短信 SDK 迁移到 Python 3.x</title>
      <link>https://isudox.com/2016/02/02/migrate-alidayu-to-py3-from-py2/</link>
      <pubDate>Tue, 02 Feb 2016 11:05:24 +0000</pubDate>
      
      <guid>https://isudox.com/2016/02/02/migrate-alidayu-to-py3-from-py2/</guid>
      <description>近期课余时间开发一个基于 Django 的 RESTful Web Service，需要接入短信验证发送功能，比较之后选定阿里大鱼的解决方案。 然而，选 Python 作为技术栈的悲催之处在于</description>
    </item>
    
  </channel>
</rss>
