<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CI on I sudo X</title>
    <link>https://isudox.com/tags/ci/</link>
    <description>Recent content in CI on I sudo X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Jan 2017 22:07:42 +0000</lastBuildDate>
    
	<atom:link href="https://isudox.com/tags/ci/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Travis CI 持续部署静态站方案</title>
      <link>https://isudox.com/2017/01/24/deploy-site-with-travis-ci/</link>
      <pubDate>Tue, 24 Jan 2017 22:07:42 +0000</pubDate>
      
      <guid>https://isudox.com/2017/01/24/deploy-site-with-travis-ci/</guid>
      <description>这两天在想 GitHub Page 部署的最佳实践。本站之前的部署方案，是通过在 VPS 上创建 Git 仓库后，再把生成的静态文件同时 Push 到 GitHub Page 和 VPS 的 Git 仓库。其中，VPS 上的 Git 仓库会设置 hook，使得有新的 Commit 被 Push 上来后，自动把 Nginx 下的站点目录进行 Pull 更新。这种方案只是一开始的设置比较麻烦，之后就能一劳永逸，但我觉得还可以再抢救下。
初步方案 既然核心目标都是一键部署，为什么不利用持续集成，那就用 Travis CI 吧，和 GitHub 无缝结合。
先来梳理下整个部署思路：
 源码文件 Push 到 GitHub Page source 分支; Travis-CI 在 GitHub Page source 分支更新后，自动构建生成站点文件； Travis-CI 将站点文件推送到 GtiHub Page master 分支，使得 username.github.io 更新； VPS 从 GitHub Page master 分支拉取更新；  也就是说，整个部署过程只需要将写好源码文件 Push 到 GitHub 相应分支，后面的操作全部交给 Travis-CI 处理。</description>
    </item>
    
  </channel>
</rss>